/* Exploratory Data Analysis (EDA) 
	
    Understanding Data
*/

-- 1. Database Exploration

SHOW databases;
USE datawarehouseanalytics ;
-- To view tables inside the database
SHOW tables;

-- 2. Dimension Exploration

/* Indentifying the unique value (or categories) in each dimension.
 Recognizing how data might be grouped or segmented, which us useful for later analysis 
 Help to understand the granuality of dimension has
 
 By Using 'DISTICT [Dimension]' */
 
 -- 1. Explor all the countries our customers come from 
 
 SELECT 
	DISTINCT country
FROM dim_customers; 

-- 2. Explor all the categories "The Major Divisions"

SELECT
	DISTINCT category, subcategory,product_name
FROM dim_products
ORDER BY category, subcategory,product_name;

-- 3. Date Exploration

/* Identify the earilest and the latest dates (boundaries).
   Understand  the scope of data  and timespan.
   
   By using 'MIN/MAX [Date Dimension]'  */
   
   -- 1. Find the date of first and last order
   
   SELECT 
		MIN(order_date)  AS first_order_date,
        MAX(order_date) AS last_order_date
	FROM fact_sales;
    
    -- 2. How many years of order data available ?
    
    SELECT 
		MIN(order_date)  AS first_order_date,
        MAX(order_date) AS last_order_date,
        DATEDIFF(MAX(order_date),MIN(order_date))   AS order_range_days
	FROM fact_sales;
 
 -- 3.FInd the youngest and the oldest customer
 
 SELECT
	MIN(birthdate) As oldest_birthdate,
    MAX(birthdate) AS youngest_birthdate,
    ROUND(DATEDIFF(current_date(),MIN(birthdate))/365.25,0) AS oldest_age,
	ROUND(DATEDIFF(current_date(),MAX(birthdate))/365.25,0) AS youngest_age
FROM dim_customers;

-- 4. Measures Exploration

/* Calculate the key metrics of the business (BIG Numbers).
	- Highest Level of Aggrigation | Lowest level of Details
    
    By using 'Aggregate Function [Measure]' i.e SUM[Sales] */
    
-- 1. Find the total Sales
SELECT
	SUM(sales_amount) AS total_sales 
FROM fact_sales;

-- 2. Find how many items are sold
SELECT
	SUM(quantity) AS total_quantity
FROM fact_sales;

-- 3. Find the average selling price
SELECT
	AVG(price) AS avg_price
FROM fact_sales;

-- 4. Find the total number of orders
SELECT
	COUNT(DISTINCT order_number) AS total_orders
FROM fact_sales;

-- 5. Find the total number of products
SELECT
	COUNT(product_key) AS total_products
FROM dim_products;

-- 6. Find the total number of customers
SELECT
	COUNT(customer_key) AS total_customer
FROM dim_customers;
 
 -- 7. Find the total number of customers that has placed an order
 SELECT
	COUNT(DISTINCT customer_key) AS total_customer
FROM fact_sales;

-- Generate Report that shows all key metrics of the business 
 
SELECT
	'Total Sales' As measure_name,
    SUM(sales_amount) AS measure_value
FROM fact_sales
UNION ALL
SELECT
	'Total Quantity' AS measure_name,
    SUM(quantity) AS measure_value
FROM fact_sales
UNION ALL
SELECT
	'Average Price' AS measure_name,
    AVG(price) AS measure_value
FROM fact_sales
UNION ALL
SELECT
	'Total Orders ' AS measure_name,
    COUNT(DISTINCT order_number) AS measure_value
FROM fact_sales
UNION ALL
SELECT
	'Total Products' AS measure_name,
    COUNT(product_key) AS measure_value
FROM dim_products
UNION ALL
SELECT
	'Total Customers' AS measure_name,
    COUNT(customer_key) AS measure_value
FROM dim_customers
UNION ALL
SELECT
	'Total Customers Ordered' AS measure_name,
    COUNT(DISTINCT customer_key) AS measure_value
FROM fact_sales;

-- 5. Magnitude Analysis

/* Compare the measure values by categories.
	It helps us to understand the inportance of different categories.
    
    By using' Aggregate Funtion[Measure] By [Dimension]'
    i.e Total sales by country */
    
-- 1. Find the total numbers of customers by countries

SELECT 
	country,
    COUNT(customer_key) AS total_customers
FROM dim_customers
GROUP BY 
	country
ORDER BY 
	total_customers DESC;

-- 2. Find the total customer by gender
    SELECT 
	gender,
    COUNT(customer_key) AS total_customer
FROM dim_customers
GROUP BY 
	gender
ORDER BY 
	total_customer DESC;

-- 3. Find the total products by category
SELECT 
	category,
    COUNT(product_key) AS total_product
FROM dim_products
GROUP BY
	category 
ORDER BY 
	total_product DESC ;

-- 4.  What is the average cost in each category
SELECT
	category,
    AVG(cost) AS avg_cost
FROM dim_products
GROUP BY 
	category
ORDER BY 
	avg_cost DESC;

-- 5. What is total revenue gererated for each category ?
 SELECT
	p.category,
   SUM( f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p 
ON p.product_key = f.product_key
GROUP BY 
	category
ORDER BY
	total_revenue DESC;

-- 6.What is the Total revenue generated by each customer ?
SELECT 
	c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM fact_sales f 
LEFT JOIN dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
	total_revenue DESC;

-- 7. What is the distribution of sold items across countries ?

SELECT 
	c.country,
    SUM(f.quantity) AS total_quantity
FROM fact_sales f 
LEFT JOIN dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.country
ORDER BY 
	total_quantity DESC;

/* Ranking Analysis (Top N - Bottom N)
	Order the value of dimensions by measure
    To identify Top N performers | Bottom N performers
    
    By using 'Rank[Dimension] By Aggregate Function [Measure]' 
    i.e rank countries by total sales */
    
-- 1. Which 5 products generates the highest revenue ?
 SELECT
	p.product_name,
   SUM( f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p 
ON p.product_key = f.product_key
GROUP BY 
	product_name
ORDER BY
	total_revenue DESC
LIMIT 5;
 
 -- 2. What are the 5 worst performing products in terms of sales
 
  SELECT
	p.product_name,
   SUM( f.sales_amount) AS total_revenue
FROM fact_sales f
LEFT JOIN dim_products p 
ON p.product_key = f.product_key
GROUP BY 
	product_name
ORDER BY
	total_revenue 
LIMIT 5;

-- Using window function

SELECT 
	*
FROM (
	SELECT
		p.product_name,
	   SUM( f.sales_amount) AS total_revenue,
	   ROW_NUMBER() OVER(ORDER BY SUM( f.sales_amount)  DESC) AS rank_products
	FROM fact_sales f
	LEFT JOIN dim_products p 
	ON p.product_key = f.product_key
	GROUP BY 
		product_name
) t 
WHERE rank_products <=5;

-- 3. Find the top 10 customers who have generated the highest revenue and 3 customers with the fewest orders placed
SELECT 
	c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM fact_sales f 
LEFT JOIN dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
	total_revenue DESC
LIMIT 10;

-- Lowest 3 customers with orders

SELECT 
	c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM fact_sales f 
LEFT JOIN dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
	total_orders 
LIMIT 3;
